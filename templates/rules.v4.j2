{% set def_int = ansible_default_ipv4.interface %}
{% set def_addr = ansible_default_ipv4.address %}
{% set def_in = "-A INPUT -i " ~ def_int ~ " -d " ~ def_addr ~ "/32" %}
{% set def_out = "-A OUTPUT -o " ~ def_int ~ " -s " ~ def_addr ~ "/32" %}
{% set state_ne_com = "-m state --state NEW,ESTABLISHED -j ACCEPT -m comment --comment" %}
{% set state_e_com = "-m state --state ESTABLISHED -j ACCEPT -m comment --comment" %}
{% set rfc1918 = "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16" %}
#######################
### ANSIBLE MANAGED ###
#######################

*filter
-F
-X
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

# loopback allowed
-A INPUT -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT
{% if (iptables_blocked_hosts is defined) and (iptables_blocked_hosts | length > 0) %}

#########################
### BGN BLOCKED HOSTS ###
#########################
{%- for host in iptables_blocked_hosts +%}
-A INPUT -s {{ host }} -j DROP -m comment --comment "block host"
-A OUTPUT -d {{ host }} -j DROP -m comment --comment "block host"
{% endfor %}
#########################
### END BLOCKED HOSTS ###
#########################
{% endif %}

#########################
### BGN INBOUND RULES ###
#########################
# ping in
-A INPUT -p icmp --icmp-type echo-request -m state --state NEW,ESTABLISHED -m limit --limit 1/s --limit-burst 10 -j ACCEPT -m comment --comment "ping in"
-A OUTPUT -p icmp --icmp-type echo-reply -m state --state ESTABLISHED -m limit --limit 1/s --limit-burst 10 -j ACCEPT -m comment --comment "ping in"

# ssh in
{% if (iptables_ssh_srcs is defined) and (iptables_ssh_srcs | length > 0) %}
{% for src in iptables_ssh_srcs %}
{{ def_in }} -s {{ src }} -p tcp --dport 22 {{ state_ne_com }} "ssh in"
{{ def_out }} -d {{ src }} -p tcp --sport 22 {{ state_e_com }} "ssh in"
{% endfor %}
{% else %}
{{ def_in }} -p tcp --dport 22 {{ state_ne_com }} "ssh in"
{{ def_out }} -p tcp --sport 22 {{ state_e_com }} "ssh in"
{% endif %}
{% if iptables_webserver %}

# http / https in
{{ def_in }} -p tcp -m multiport --dports 443,80 {{ state_ne_com }} "https & http in"
{{ def_out }} -p tcp -m multiport --sports 443,80 {{ state_e_com }} "https & http in"
{% endif %}
{% if iptables_zabbix is defined and iptables_zabbix %}

# zabbix in
{{ def_in }} {% if iptables_zabbix_src is defined -%} -s {{ iptables_zabbix_src+" "-}} {% endif %}
-p tcp --dport 10050 {{ state_ne_com }} "zabbix in"
{{ def_out }} {% if iptables_zabbix_src is defined -%} -d {{ iptables_zabbix_src+" "-}} {% endif %}
-p tcp --sport 10050 {{ state_e_com }} "zabbix in"
{% endif %}
{% if iptables_snmp is defined and iptables_snmp %}

# snmp in
{% for protocol in [ "tcp", "udp" ] %}
{{ def_in }} {% if iptables_snmp_src is defined -%} -s {{ iptables_snmp_src+" "-}} {% endif %}
-p {{ protocol }} -m multiport --dports 161,162 {{ state_ne_com }} "snmp in"
{{ def_out }} {% if iptables_snmp_src is defined -%} -d {{ iptables_snmp_src+" "-}} {% endif %}
-p {{ protocol }} -m multiport --sports 161,162 {{ state_e_com }} "snmp in"
{% endfor %}
{% endif %}
#########################
### END INBOUND RULES ###
#########################

##########################
### BGN OUTBOUND RULES ###
##########################
# ping out
-A OUTPUT -p icmp --icmp-type echo-request -m state --state NEW,ESTABLISHED -m limit --limit 1/s --limit-burst 10 -j ACCEPT -m comment --comment "ping out"
-A INPUT -p icmp --icmp-type echo-reply -m state --state ESTABLISHED -m limit --limit 1/s --limit-burst 10 -j ACCEPT -m comment --comment "ping out"

# ntp out
{% if (iptables_ntp_dsts is defined) and (iptables_ntp_dsts | length > 0) %}
{% for dst in iptables_ntp_dsts %}
{{ def_out }} -d {{ dst }} -p udp --dport 123 {{ state_ne_com }} "ntp out"
{{ def_in }} -s {{ dst }} -p udp --sport 123 {{ state_e_com }} "ntp out"
{% endfor %}
{% else %}
{{ def_out }} -p udp --dport 123 {{ state_ne_com }} "ntp out"
{{ def_in }} -p udp --sport 123 {{ state_e_com }} "ntp out"
{% endif %}

# dns out
{% if (iptables_dns_dsts is defined) and (iptables_dns_dsts | length > 0) %}
{% for dst in iptables_dns_dsts %}
{{ def_out }} -d {{ dst }} -p {{ iptables_dns_proto }} --dport {{ iptables_dns_port }} {{ state_ne_com }} "dns out"
{{ def_in }} -s {{ dst }} -p {{ iptables_dns_proto }} --sport {{ iptables_dns_port }} {{ state_e_com }} "dns out"
{% endfor %}
{% else %}
{{ def_out }} -p {{ iptables_dns_proto }} --dport {{ iptables_dns_port }} {{ state_ne_com }} "dns out"
{{ def_in }} -p {{ iptables_dns_proto }} --sport {{ iptables_dns_port }} {{ state_e_com }} "dns out"
{% endif %}
{% if iptables_dhcp %}

# dhcp out
{{ def_out }} -p udp -m multiport --dports 67,68 {{ state_ne_com }} "dhcp out"
{{ def_in }} -p udp -m multiport --sports 67,68 {{ state_e_com }} "dhcp out"
{% endif %}

# https out
{% if (iptables_https_dsts is defined) and (iptables_https_dsts | length > 0) %}
{% for dst in iptables_https_dsts %}
{{ def_out }} -d {{ dst }} -p tcp --dport 443 {{ state_ne_com }} "https out"
{{ def_in }} -s {{ dst }} -p tcp --sport 443 {{ state_e_com }} "https out"
{% endfor %}
{% else %}
{{ def_out }} -p tcp --dport 443 {{ state_ne_com }} "https out"
{{ def_in }} -p tcp --sport 443 {{ state_e_com }} "https out"
{% endif %}
{% if iptables_http %}

# http out
{% if (iptables_http_dsts is defined) and (iptables_http_dsts | length > 0) %}
{% for dst in iptables_http_dsts %}
{{ def_out }} -d {{ dst }} -p tcp --dport 80 {{ state_ne_com }} "http out"
{{ def_in }} -s {{ dst }} -p tcp --sport 80 {{ state_e_com }} "http out"
{% endfor %}
{% else %}
{{ def_out }} -p tcp --dport 80 {{ state_ne_com }} "http out"
{{ def_in }} -p tcp --sport 80 {{ state_e_com }} "http out"
{% endif %}
{% endif %}
##########################
### END OUTBOUND RULES ###
##########################
{% if (iptables_custom_rules is defined) and (iptables_custom_rules | length > 0) %}

########################
### BGN CUSTOM RULES ###
########################
{% for rule in iptables_custom_rules %}
{{ rule }}
{% endfor %}
########################
### END CUSTOM RULES ###
########################
{% endif %}

#############################
### BGN DROP/REJECT RULES ###
#############################
# def reject rfc1918 input
-N IN_REJ
-A IN_REJ -j LOG --log-prefix "FW-IR: "
-A IN_REJ -j REJECT
-A INPUT -s {{ rfc1918 }} -m state --state NEW -j IN_REJ

# def reject rfc1918 forward
-N FWD_REJ
-A FWD_REJ -j LOG --log-prefix "FW-FR: "
-A FWD_REJ -j REJECT
-A FORWARD -s {{ rfc1918 }} -m state --state NEW -j FWD_REJ

# def reject output
-N OUT_REJ
-A OUT_REJ -j LOG --log-prefix "FW-OR: "
-A OUT_REJ -j REJECT
-A OUTPUT -m state --state NEW -j OUT_REJ

# def drop
-A INPUT -j LOG --log-prefix "FW-ID: "
-A INPUT -j DROP
-A FORWARD -j LOG --log-prefix "FW-FD: "
-A FORWARD -j DROP
-A OUTPUT -j LOG --log-prefix "FW-OD: "
-A OUTPUT -j DROP
#############################
### END DROP/REJECT RULES ###
#############################

COMMIT
